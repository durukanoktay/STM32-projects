
led_blink_with_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003acc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c90  08003c90  00004c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb0  08003cb0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00004cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00004cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cb8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  2000000c  08003cc4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08003cc4  000055a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eeb  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238a  00000000  00000000  00015f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000182b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bea  00000000  00000000  000191f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021aab  00000000  00000000  00019dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ba1  00000000  00000000  0003b885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf6f5  00000000  00000000  0004d426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cb1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  0011cb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00120cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003c78 	.word	0x08003c78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003c78 	.word	0x08003c78

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fbbc 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f868 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f976 	bl	80007f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f91c 	bl	8000740 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 f944 	bl	8000794 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800050c:	f000 f8cc 	bl	80006a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000510:	482a      	ldr	r0, [pc, #168]	@ (80005bc <main+0xc8>)
 8000512:	f002 f9a1 	bl	8002858 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(count_led>8000)
 8000516:	4b2a      	ldr	r3, [pc, #168]	@ (80005c0 <main+0xcc>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800051e:	d903      	bls.n	8000528 <main+0x34>
	  {
		  count_led = 0;
 8000520:	4b27      	ldr	r3, [pc, #156]	@ (80005c0 <main+0xcc>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	e7f6      	b.n	8000516 <main+0x22>
	  }
	  else if (count_led > 6000)
 8000528:	4b25      	ldr	r3, [pc, #148]	@ (80005c0 <main+0xcc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000530:	4293      	cmp	r3, r2
 8000532:	d92a      	bls.n	800058a <main+0x96>
	  {
	          if (count_led % 100 == 0)
 8000534:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <main+0xcc>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b22      	ldr	r3, [pc, #136]	@ (80005c4 <main+0xd0>)
 800053a:	fba3 1302 	umull	r1, r3, r3, r2
 800053e:	095b      	lsrs	r3, r3, #5
 8000540:	2164      	movs	r1, #100	@ 0x64
 8000542:	fb01 f303 	mul.w	r3, r1, r3
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1e4      	bne.n	8000516 <main+0x22>
	          {
	              // Mevcut pin durumunu oku
	              if(blinker % 2 == 0)
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <main+0xd4>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	b29b      	uxth	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d10b      	bne.n	8000572 <main+0x7e>
	              {
	            	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2101      	movs	r1, #1
 800055e:	481b      	ldr	r0, [pc, #108]	@ (80005cc <main+0xd8>)
 8000560:	f000 fec4 	bl	80012ec <HAL_GPIO_WritePin>
	            	  blinker++;
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <main+0xd4>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b29a      	uxth	r2, r3
 800056c:	4b16      	ldr	r3, [pc, #88]	@ (80005c8 <main+0xd4>)
 800056e:	801a      	strh	r2, [r3, #0]
 8000570:	e7d1      	b.n	8000516 <main+0x22>
	              }
	              else
	              {
	            	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	2101      	movs	r1, #1
 8000576:	4815      	ldr	r0, [pc, #84]	@ (80005cc <main+0xd8>)
 8000578:	f000 feb8 	bl	80012ec <HAL_GPIO_WritePin>
	            	  blinker++;
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <main+0xd4>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <main+0xd4>)
 8000586:	801a      	strh	r2, [r3, #0]
 8000588:	e7c5      	b.n	8000516 <main+0x22>
	              }

	          }
	  }
	  else if(count_led>4000)
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <main+0xcc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000592:	d906      	bls.n	80005a2 <main+0xae>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <main+0xd8>)
 800059c:	f000 fea6 	bl	80012ec <HAL_GPIO_WritePin>
 80005a0:	e7b9      	b.n	8000516 <main+0x22>
	  }
	  else if(count_led>2000)
 80005a2:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <main+0xcc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005aa:	d9b4      	bls.n	8000516 <main+0x22>
	  {

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b2:	4806      	ldr	r0, [pc, #24]	@ (80005cc <main+0xd8>)
 80005b4:	f000 fe9a 	bl	80012ec <HAL_GPIO_WritePin>
	  if(count_led>8000)
 80005b8:	e7ad      	b.n	8000516 <main+0x22>
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028
 80005c0:	2000059c 	.word	0x2000059c
 80005c4:	51eb851f 	.word	0x51eb851f
 80005c8:	200005a0 	.word	0x200005a0
 80005cc:	40020400 	.word	0x40020400

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	@ 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb1d 	bl	8003c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <SystemClock_Config+0xd0>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a28      	ldr	r2, [pc, #160]	@ (80006a0 <SystemClock_Config+0xd0>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <SystemClock_Config+0xd4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a22      	ldr	r2, [pc, #136]	@ (80006a4 <SystemClock_Config+0xd4>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <SystemClock_Config+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000630:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000644:	23a8      	movs	r3, #168	@ 0xa8
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064c:	2307      	movs	r3, #7
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fe0f 	bl	800227c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 f984 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ff84 	bl	8001594 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000692:	f000 f96d 	bl	8000970 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	@ 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_TIM2_Init+0x94>)
 80006c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_TIM2_Init+0x94>)
 80006ce:	2253      	movs	r2, #83	@ 0x53
 80006d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_TIM2_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_TIM2_Init+0x94>)
 80006da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_TIM2_Init+0x94>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_TIM2_Init+0x94>)
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ec:	4813      	ldr	r0, [pc, #76]	@ (800073c <MX_TIM2_Init+0x94>)
 80006ee:	f002 f863 	bl	80027b8 <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006f8:	f000 f93a 	bl	8000970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_TIM2_Init+0x94>)
 800070a:	f002 fa05 	bl	8002b18 <HAL_TIM_ConfigClockSource>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 f92c 	bl	8000970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_TIM2_Init+0x94>)
 8000726:	f002 fc2d 	bl	8002f84 <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000730:	f000 f91e 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028

08000740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <MX_USART3_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_USART3_UART_Init+0x4c>)
 8000778:	f002 fc94 	bl	80030a4 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f8f5 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000070 	.word	0x20000070
 8000790:	40004800 	.word	0x40004800

08000794 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800079e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2206      	movs	r2, #6
 80007a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	f000 fda1 	bl	800131e <HAL_PCD_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 f8c5 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000b8 	.word	0x200000b8

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a4b      	ldr	r2, [pc, #300]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b45      	ldr	r3, [pc, #276]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a44      	ldr	r2, [pc, #272]	@ (800093c <MX_GPIO_Init+0x14c>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b42      	ldr	r3, [pc, #264]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b3e      	ldr	r3, [pc, #248]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a3d      	ldr	r2, [pc, #244]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b3b      	ldr	r3, [pc, #236]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b37      	ldr	r3, [pc, #220]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a36      	ldr	r2, [pc, #216]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b34      	ldr	r3, [pc, #208]	@ (800093c <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b30      	ldr	r3, [pc, #192]	@ (800093c <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a2f      	ldr	r2, [pc, #188]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b2d      	ldr	r3, [pc, #180]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b29      	ldr	r3, [pc, #164]	@ (800093c <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a28      	ldr	r2, [pc, #160]	@ (800093c <MX_GPIO_Init+0x14c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b26      	ldr	r3, [pc, #152]	@ (800093c <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008b4:	4822      	ldr	r0, [pc, #136]	@ (8000940 <MX_GPIO_Init+0x150>)
 80008b6:	f000 fd19 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2140      	movs	r1, #64	@ 0x40
 80008be:	4821      	ldr	r0, [pc, #132]	@ (8000944 <MX_GPIO_Init+0x154>)
 80008c0:	f000 fd14 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	481b      	ldr	r0, [pc, #108]	@ (8000948 <MX_GPIO_Init+0x158>)
 80008dc:	f000 fb72 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4811      	ldr	r0, [pc, #68]	@ (8000940 <MX_GPIO_Init+0x150>)
 80008fa:	f000 fb63 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fe:	2340      	movs	r3, #64	@ 0x40
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	@ (8000944 <MX_GPIO_Init+0x154>)
 8000916:	f000 fb55 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091a:	2380      	movs	r3, #128	@ 0x80
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_GPIO_Init+0x154>)
 800092e:	f000 fb49 	bl	8000fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	@ 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400
 8000944:	40021800 	.word	0x40021800
 8000948:	40020800 	.word	0x40020800

0800094c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	count_led++;
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095c:	6013      	str	r3, [r2, #0]
	}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	2000059c 	.word	0x2000059c

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000990:	6453      	str	r3, [r2, #68]	@ 0x44
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009dc:	d115      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <HAL_TIM_Base_MspInit+0x48>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000a14 <HAL_TIM_Base_MspInit+0x48>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_TIM_Base_MspInit+0x48>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	201c      	movs	r0, #28
 8000a00:	f000 faa9 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a04:	201c      	movs	r0, #28
 8000a06:	f000 fac2 	bl	8000f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_UART_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a84:	2307      	movs	r3, #7
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <HAL_UART_MspInit+0x8c>)
 8000a90:	f000 fa98 	bl	8000fc4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40004800 	.word	0x40004800
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0a0      	sub	sp, #128	@ 0x80
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	225c      	movs	r2, #92	@ 0x5c
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 f8a8 	bl	8003c1e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ad6:	d14e      	bne.n	8000b76 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000adc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fe6e 	bl	80017c8 <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000af2:	f7ff ff3d 	bl	8000970 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <HAL_PCD_MspInit+0xd8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a20      	ldr	r2, [pc, #128]	@ (8000b80 <HAL_PCD_MspInit+0xd8>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <HAL_PCD_MspInit+0xd8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b12:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b24:	230a      	movs	r3, #10
 8000b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4815      	ldr	r0, [pc, #84]	@ (8000b84 <HAL_PCD_MspInit+0xdc>)
 8000b30:	f000 fa48 	bl	8000fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b46:	4619      	mov	r1, r3
 8000b48:	480e      	ldr	r0, [pc, #56]	@ (8000b84 <HAL_PCD_MspInit+0xdc>)
 8000b4a:	f000 fa3b 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_PCD_MspInit+0xd8>)
 8000b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <HAL_PCD_MspInit+0xd8>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b58:	6353      	str	r3, [r2, #52]	@ 0x34
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_PCD_MspInit+0xd8>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <HAL_PCD_MspInit+0xd8>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_PCD_MspInit+0xd8>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000b76:	bf00      	nop
 8000b78:	3780      	adds	r7, #128	@ 0x80
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 f89b 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <TIM2_IRQHandler+0x10>)
 8000bee:	f001 fea3 	bl	8002938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000028 	.word	0x20000028

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 ffef 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc4f 	bl	80004f4 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c64:	08003cb8 	.word	0x08003cb8
  ldr r2, =_sbss
 8000c68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c6c:	200005a8 	.word	0x200005a8

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f94f 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe68 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f967 	bl	8000faa <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf4:	f000 f92f 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200005a4 	.word	0x200005a4

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200005a4 	.word	0x200005a4

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e165      	b.n	80012ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8154 	bne.w	80012a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80ae 	beq.w	80012a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	4a5c      	ldr	r2, [pc, #368]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6453      	str	r3, [r2, #68]	@ 0x44
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a58      	ldr	r2, [pc, #352]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	@ (80012cc <HAL_GPIO_Init+0x308>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x21a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	@ (80012d0 <HAL_GPIO_Init+0x30c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x216>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <HAL_GPIO_Init+0x310>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x212>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x20a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4a      	ldr	r2, [pc, #296]	@ (80012e0 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x206>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a49      	ldr	r2, [pc, #292]	@ (80012e4 <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x202>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a26      	ldr	r2, [pc, #152]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae96 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af02      	add	r7, sp, #8
 8001324:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e108      	b.n	8001542 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fbac 	bl	8000aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800135e:	d102      	bne.n	8001366 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 f9c2 	bl	80036f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7c1a      	ldrb	r2, [r3, #16]
 8001378:	f88d 2000 	strb.w	r2, [sp]
 800137c:	3304      	adds	r3, #4
 800137e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001380:	f002 f954 	bl	800362c <USB_CoreInit>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2202      	movs	r2, #2
 800138e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0d5      	b.n	8001542 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f002 f9ba 	bl	8003716 <USB_SetCurrentMode>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2202      	movs	r2, #2
 80013ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0c6      	b.n	8001542 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e04a      	b.n	8001450 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3315      	adds	r3, #21
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	3314      	adds	r3, #20
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	b298      	uxth	r0, r3
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	332e      	adds	r3, #46	@ 0x2e
 80013f6:	4602      	mov	r2, r0
 80013f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3318      	adds	r3, #24
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	331c      	adds	r3, #28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3320      	adds	r3, #32
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3324      	adds	r3, #36	@ 0x24
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	3301      	adds	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3af      	bcc.n	80013ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e044      	b.n	80014ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	3301      	adds	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	791b      	ldrb	r3, [r3, #4]
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3b5      	bcc.n	8001460 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7c1a      	ldrb	r2, [r3, #16]
 80014fc:	f88d 2000 	strb.w	r2, [sp]
 8001500:	3304      	adds	r3, #4
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	f002 f954 	bl	80037b0 <USB_DevInit>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e013      	b.n	8001542 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7b1b      	ldrb	r3, [r3, #12]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d102      	bne.n	8001536 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f80a 	bl	800154a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fb0f 	bl	8003b5e <USB_DevDisconnect>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	f043 0303 	orr.w	r3, r3, #3
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0cc      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b68      	ldr	r3, [pc, #416]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d90c      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b65      	ldr	r3, [pc, #404]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a58      	ldr	r2, [pc, #352]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800160a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d044      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d119      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d003      	beq.n	8001652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	2b03      	cmp	r3, #3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e067      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f023 0203 	bic.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4934      	ldr	r1, [pc, #208]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff fb5c 	bl	8000d40 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168c:	f7ff fb58 	bl	8000d40 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e04f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 020c 	and.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1eb      	bne.n	800168c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20c      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171a:	f000 fb7f 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 800171e:	4602      	mov	r2, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	490a      	ldr	r1, [pc, #40]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fabc 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	08003c90 	.word	0x08003c90
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <HAL_RCC_GetHCLKFreq+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000000 	.word	0x20000000

08001778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800177c:	f7ff fff0 	bl	8001760 <HAL_RCC_GetHCLKFreq>
 8001780:	4602      	mov	r2, r0
 8001782:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	0a9b      	lsrs	r3, r3, #10
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	4903      	ldr	r1, [pc, #12]	@ (800179c <HAL_RCC_GetPCLK1Freq+0x24>)
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	08003ca0 	.word	0x08003ca0

080017a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017a4:	f7ff ffdc 	bl	8001760 <HAL_RCC_GetHCLKFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	0b5b      	lsrs	r3, r3, #13
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	4903      	ldr	r1, [pc, #12]	@ (80017c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	08003ca0 	.word	0x08003ca0

080017c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	@ 0x30
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001800:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001802:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001806:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180e:	496c      	ldr	r1, [pc, #432]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001810:	4313      	orrs	r3, r2
 8001812:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800181e:	2301      	movs	r3, #1
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d010      	beq.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800182e:	4b64      	ldr	r3, [pc, #400]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001834:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800183c:	4960      	ldr	r1, [pc, #384]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800183e:	4313      	orrs	r3, r2
 8001840:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800184c:	2301      	movs	r3, #1
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d017      	beq.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800185c:	4b58      	ldr	r3, [pc, #352]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800185e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001862:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4955      	ldr	r1, [pc, #340]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800186c:	4313      	orrs	r3, r2
 800186e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800187a:	d101      	bne.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800187c:	2301      	movs	r3, #1
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001888:	2301      	movs	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d017      	beq.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001898:	4b49      	ldr	r3, [pc, #292]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800189a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a6:	4946      	ldr	r1, [pc, #280]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018b6:	d101      	bne.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80018b8:	2301      	movs	r3, #1
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 808a 	beq.w	80019ea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a38      	ldr	r2, [pc, #224]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80018f2:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a33      	ldr	r2, [pc, #204]	@ (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018fe:	f7ff fa1f 	bl	8000d40 <HAL_GetTick>
 8001902:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff fa1b 	bl	8000d40 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e278      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001918:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001924:	4b26      	ldr	r3, [pc, #152]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001928:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800192c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d02f      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800193c:	6a3a      	ldr	r2, [r7, #32]
 800193e:	429a      	cmp	r2, r3
 8001940:	d028      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001942:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800194a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800194c:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001952:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001958:	4a19      	ldr	r2, [pc, #100]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d114      	bne.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff f9e9 	bl	8000d40 <HAL_GetTick>
 800196e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff f9e5 	bl	8000d40 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e240      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ee      	beq.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800199c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019a0:	d114      	bne.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80019b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019b6:	4902      	ldr	r1, [pc, #8]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
 80019bc:	e00c      	b.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000
 80019c8:	42470e40 	.word	0x42470e40
 80019cc:	4b4a      	ldr	r3, [pc, #296]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a49      	ldr	r2, [pc, #292]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80019d6:	6093      	str	r3, [r2, #8]
 80019d8:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	4944      	ldr	r1, [pc, #272]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80019fc:	4b3f      	ldr	r3, [pc, #252]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80019fe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00a      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1a:	4937      	ldr	r1, [pc, #220]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00a      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a2e:	4b32      	ldr	r3, [pc, #200]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a34:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a3c:	492e      	ldr	r1, [pc, #184]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d011      	beq.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a50:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a56:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5e:	4926      	ldr	r1, [pc, #152]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00a      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001a80:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a86:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	491a      	ldr	r1, [pc, #104]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d011      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ab0:	4911      	ldr	r1, [pc, #68]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ad4:	f040 80ff 	bne.w	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ad8:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ade:	f7ff f92f 	bl	8000d40 <HAL_GetTick>
 8001ae2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ae4:	e00e      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ae6:	f7ff f92b 	bl	8000d40 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d907      	bls.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e188      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	424711e0 	.word	0x424711e0
 8001b00:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b04:	4b7e      	ldr	r3, [pc, #504]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ea      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d028      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d124      	bne.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b38:	4b71      	ldr	r3, [pc, #452]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	3301      	adds	r3, #1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b50:	0e1b      	lsrs	r3, r3, #24
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	019b      	lsls	r3, r3, #6
 8001b62:	431a      	orrs	r2, r3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	071b      	lsls	r3, r3, #28
 8001b7a:	4961      	ldr	r1, [pc, #388]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b96:	d00a      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d035      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bac:	d130      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001bae:	4b54      	ldr	r3, [pc, #336]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bc6:	0f1b      	lsrs	r3, r3, #28
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	019b      	lsls	r3, r3, #6
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	3b01      	subs	r3, #1
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	431a      	orrs	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	071b      	lsls	r3, r3, #28
 8001bf0:	4943      	ldr	r1, [pc, #268]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001bf8:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfe:	f023 021f 	bic.w	r2, r3, #31
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	493d      	ldr	r1, [pc, #244]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d029      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c24:	d124      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c26:	4b36      	ldr	r3, [pc, #216]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c38:	4b31      	ldr	r3, [pc, #196]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c3e:	0f1b      	lsrs	r3, r3, #28
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	019b      	lsls	r3, r3, #6
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	431a      	orrs	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	071b      	lsls	r3, r3, #28
 8001c68:	4925      	ldr	r1, [pc, #148]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d016      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	071b      	lsls	r3, r3, #28
 8001ca2:	4917      	ldr	r1, [pc, #92]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f846 	bl	8000d40 <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cb8:	f7ff f842 	bl	8000d40 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e09f      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	f040 8095 	bne.w	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f82c 	bl	8000d40 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cea:	e00f      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cec:	f7ff f828 	bl	8000d40 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d908      	bls.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e085      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470068 	.word	0x42470068
 8001d08:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d0c:	4b41      	ldr	r3, [pc, #260]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d18:	d0e8      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02b      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d127      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001d42:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	019b      	lsls	r3, r3, #6
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	061b      	lsls	r3, r3, #24
 8001d70:	4928      	ldr	r1, [pc, #160]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d78:	4b26      	ldr	r3, [pc, #152]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d7e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	3b01      	subs	r3, #1
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	4922      	ldr	r1, [pc, #136]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01d      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001da6:	d118      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001da8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	0e1b      	lsrs	r3, r3, #24
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	019b      	lsls	r3, r3, #6
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	4910      	ldr	r1, [pc, #64]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001dda:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001de0:	f7fe ffae 	bl	8000d40 <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001de8:	f7fe ffaa 	bl	8000d40 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e007      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e06:	d1ef      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3730      	adds	r7, #48	@ 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	42470070 	.word	0x42470070

08001e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e20:	b0ae      	sub	sp, #184	@ 0xb8
 8001e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e42:	4bcb      	ldr	r3, [pc, #812]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	f200 8206 	bhi.w	800225c <HAL_RCC_GetSysClockFreq+0x440>
 8001e50:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e8d 	.word	0x08001e8d
 8001e5c:	0800225d 	.word	0x0800225d
 8001e60:	0800225d 	.word	0x0800225d
 8001e64:	0800225d 	.word	0x0800225d
 8001e68:	08001e95 	.word	0x08001e95
 8001e6c:	0800225d 	.word	0x0800225d
 8001e70:	0800225d 	.word	0x0800225d
 8001e74:	0800225d 	.word	0x0800225d
 8001e78:	08001e9d 	.word	0x08001e9d
 8001e7c:	0800225d 	.word	0x0800225d
 8001e80:	0800225d 	.word	0x0800225d
 8001e84:	0800225d 	.word	0x0800225d
 8001e88:	0800208d 	.word	0x0800208d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4bb9      	ldr	r3, [pc, #740]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001e92:	e1e7      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e94:	4bb8      	ldr	r3, [pc, #736]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e9a:	e1e3      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9c:	4bb4      	ldr	r3, [pc, #720]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea8:	4bb1      	ldr	r3, [pc, #708]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d071      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb4:	4bae      	ldr	r3, [pc, #696]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ec0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ecc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001eda:	4622      	mov	r2, r4
 8001edc:	462b      	mov	r3, r5
 8001ede:	f04f 0000 	mov.w	r0, #0
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	0159      	lsls	r1, r3, #5
 8001ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eec:	0150      	lsls	r0, r2, #5
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	1a51      	subs	r1, r2, r1
 8001ef6:	6439      	str	r1, [r7, #64]	@ 0x40
 8001ef8:	4629      	mov	r1, r5
 8001efa:	eb63 0301 	sbc.w	r3, r3, r1
 8001efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	018b      	lsls	r3, r1, #6
 8001f10:	4641      	mov	r1, r8
 8001f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f16:	4641      	mov	r1, r8
 8001f18:	018a      	lsls	r2, r1, #6
 8001f1a:	4641      	mov	r1, r8
 8001f1c:	1a51      	subs	r1, r2, r1
 8001f1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f20:	4649      	mov	r1, r9
 8001f22:	eb63 0301 	sbc.w	r3, r3, r1
 8001f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f34:	4649      	mov	r1, r9
 8001f36:	00cb      	lsls	r3, r1, #3
 8001f38:	4641      	mov	r1, r8
 8001f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f3e:	4641      	mov	r1, r8
 8001f40:	00ca      	lsls	r2, r1, #3
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	4622      	mov	r2, r4
 8001f4a:	189b      	adds	r3, r3, r2
 8001f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f4e:	462b      	mov	r3, r5
 8001f50:	460a      	mov	r2, r1
 8001f52:	eb42 0303 	adc.w	r3, r2, r3
 8001f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f64:	4629      	mov	r1, r5
 8001f66:	024b      	lsls	r3, r1, #9
 8001f68:	4621      	mov	r1, r4
 8001f6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f6e:	4621      	mov	r1, r4
 8001f70:	024a      	lsls	r2, r1, #9
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f88:	f7fe f93c 	bl	8000204 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4613      	mov	r3, r2
 8001f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f96:	e067      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f98:	4b75      	ldr	r3, [pc, #468]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fa4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fb6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001fba:	4622      	mov	r2, r4
 8001fbc:	462b      	mov	r3, r5
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0159      	lsls	r1, r3, #5
 8001fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fcc:	0150      	lsls	r0, r2, #5
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	1a51      	subs	r1, r2, r1
 8001fd6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fd8:	4629      	mov	r1, r5
 8001fda:	eb63 0301 	sbc.w	r3, r3, r1
 8001fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001fec:	4649      	mov	r1, r9
 8001fee:	018b      	lsls	r3, r1, #6
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ff6:	4641      	mov	r1, r8
 8001ff8:	018a      	lsls	r2, r1, #6
 8001ffa:	4641      	mov	r1, r8
 8001ffc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002000:	4649      	mov	r1, r9
 8002002:	eb63 0b01 	sbc.w	fp, r3, r1
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002012:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800201a:	4692      	mov	sl, r2
 800201c:	469b      	mov	fp, r3
 800201e:	4623      	mov	r3, r4
 8002020:	eb1a 0303 	adds.w	r3, sl, r3
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	462b      	mov	r3, r5
 8002028:	eb4b 0303 	adc.w	r3, fp, r3
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800203a:	4629      	mov	r1, r5
 800203c:	028b      	lsls	r3, r1, #10
 800203e:	4621      	mov	r1, r4
 8002040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002044:	4621      	mov	r1, r4
 8002046:	028a      	lsls	r2, r1, #10
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002050:	2200      	movs	r2, #0
 8002052:	673b      	str	r3, [r7, #112]	@ 0x70
 8002054:	677a      	str	r2, [r7, #116]	@ 0x74
 8002056:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800205a:	f7fe f8d3 	bl	8000204 <__aeabi_uldivmod>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4613      	mov	r3, r2
 8002064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002068:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800207a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800207e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800208a:	e0eb      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800208c:	4b38      	ldr	r3, [pc, #224]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002098:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d06b      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a4:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x354>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	099b      	lsrs	r3, r3, #6
 80020aa:	2200      	movs	r2, #0
 80020ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80020b8:	2300      	movs	r3, #0
 80020ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80020bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020c0:	4622      	mov	r2, r4
 80020c2:	462b      	mov	r3, r5
 80020c4:	f04f 0000 	mov.w	r0, #0
 80020c8:	f04f 0100 	mov.w	r1, #0
 80020cc:	0159      	lsls	r1, r3, #5
 80020ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d2:	0150      	lsls	r0, r2, #5
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4621      	mov	r1, r4
 80020da:	1a51      	subs	r1, r2, r1
 80020dc:	61b9      	str	r1, [r7, #24]
 80020de:	4629      	mov	r1, r5
 80020e0:	eb63 0301 	sbc.w	r3, r3, r1
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020f2:	4659      	mov	r1, fp
 80020f4:	018b      	lsls	r3, r1, #6
 80020f6:	4651      	mov	r1, sl
 80020f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020fc:	4651      	mov	r1, sl
 80020fe:	018a      	lsls	r2, r1, #6
 8002100:	4651      	mov	r1, sl
 8002102:	ebb2 0801 	subs.w	r8, r2, r1
 8002106:	4659      	mov	r1, fp
 8002108:	eb63 0901 	sbc.w	r9, r3, r1
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002118:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800211c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002120:	4690      	mov	r8, r2
 8002122:	4699      	mov	r9, r3
 8002124:	4623      	mov	r3, r4
 8002126:	eb18 0303 	adds.w	r3, r8, r3
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	462b      	mov	r3, r5
 800212e:	eb49 0303 	adc.w	r3, r9, r3
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002140:	4629      	mov	r1, r5
 8002142:	024b      	lsls	r3, r1, #9
 8002144:	4621      	mov	r1, r4
 8002146:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800214a:	4621      	mov	r1, r4
 800214c:	024a      	lsls	r2, r1, #9
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002156:	2200      	movs	r2, #0
 8002158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800215a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800215c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002160:	f7fe f850 	bl	8000204 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800216e:	e065      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x420>
 8002170:	40023800 	.word	0x40023800
 8002174:	00f42400 	.word	0x00f42400
 8002178:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x458>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	2200      	movs	r2, #0
 8002184:	4618      	mov	r0, r3
 8002186:	4611      	mov	r1, r2
 8002188:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800218c:	653b      	str	r3, [r7, #80]	@ 0x50
 800218e:	2300      	movs	r3, #0
 8002190:	657b      	str	r3, [r7, #84]	@ 0x54
 8002192:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002196:	4642      	mov	r2, r8
 8002198:	464b      	mov	r3, r9
 800219a:	f04f 0000 	mov.w	r0, #0
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	0159      	lsls	r1, r3, #5
 80021a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a8:	0150      	lsls	r0, r2, #5
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4641      	mov	r1, r8
 80021b0:	1a51      	subs	r1, r2, r1
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	4649      	mov	r1, r9
 80021b6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021c8:	4659      	mov	r1, fp
 80021ca:	018b      	lsls	r3, r1, #6
 80021cc:	4651      	mov	r1, sl
 80021ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021d2:	4651      	mov	r1, sl
 80021d4:	018a      	lsls	r2, r1, #6
 80021d6:	4651      	mov	r1, sl
 80021d8:	1a54      	subs	r4, r2, r1
 80021da:	4659      	mov	r1, fp
 80021dc:	eb63 0501 	sbc.w	r5, r3, r1
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	00eb      	lsls	r3, r5, #3
 80021ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ee:	00e2      	lsls	r2, r4, #3
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	4643      	mov	r3, r8
 80021f6:	18e3      	adds	r3, r4, r3
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	464b      	mov	r3, r9
 80021fc:	eb45 0303 	adc.w	r3, r5, r3
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800220e:	4629      	mov	r1, r5
 8002210:	028b      	lsls	r3, r1, #10
 8002212:	4621      	mov	r1, r4
 8002214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002218:	4621      	mov	r1, r4
 800221a:	028a      	lsls	r2, r1, #10
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002224:	2200      	movs	r2, #0
 8002226:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002228:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800222a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800222e:	f7fd ffe9 	bl	8000204 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4613      	mov	r3, r2
 8002238:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800223c:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x458>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0f1b      	lsrs	r3, r3, #28
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800224a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800224e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800225a:	e003      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x45c>)
 800225e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002262:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002268:	4618      	mov	r0, r3
 800226a:	37b8      	adds	r7, #184	@ 0xb8
 800226c:	46bd      	mov	sp, r7
 800226e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	00f42400 	.word	0x00f42400

0800227c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e28d      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8083 	beq.w	80023a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800229c:	4b94      	ldr	r3, [pc, #592]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d019      	beq.n	80022dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022a8:	4b91      	ldr	r3, [pc, #580]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022b4:	4b8e      	ldr	r3, [pc, #568]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022c0:	d00c      	beq.n	80022dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c2:	4b8b      	ldr	r3, [pc, #556]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d112      	bne.n	80022f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b88      	ldr	r3, [pc, #544]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b84      	ldr	r3, [pc, #528]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x124>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d157      	bne.n	80023a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e25a      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x90>
 80022fe:	4b7c      	ldr	r3, [pc, #496]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7b      	ldr	r2, [pc, #492]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xcc>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0xb4>
 8002316:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a75      	ldr	r2, [pc, #468]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b73      	ldr	r3, [pc, #460]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a72      	ldr	r2, [pc, #456]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xcc>
 8002330:	4b6f      	ldr	r3, [pc, #444]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6e      	ldr	r2, [pc, #440]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b6c      	ldr	r3, [pc, #432]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6b      	ldr	r2, [pc, #428]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fcf6 	bl	8000d40 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fcf2 	bl	8000d40 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	@ 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e21f      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b61      	ldr	r3, [pc, #388]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xdc>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fce2 	bl	8000d40 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fcde 	bl	8000d40 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e20b      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b57      	ldr	r3, [pc, #348]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x104>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06f      	beq.n	800248e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023ae:	4b50      	ldr	r3, [pc, #320]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d017      	beq.n	80023ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ba:	4b4d      	ldr	r3, [pc, #308]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023c6:	4b4a      	ldr	r3, [pc, #296]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b41      	ldr	r3, [pc, #260]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x186>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1d3      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4937      	ldr	r1, [pc, #220]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <HAL_RCC_OscConfig+0x278>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7fe fc8b 	bl	8000d40 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe fc87 	bl	8000d40 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1b4      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b28      	ldr	r3, [pc, #160]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4925      	ldr	r1, [pc, #148]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <HAL_RCC_OscConfig+0x278>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fc6a 	bl	8000d40 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe fc66 	bl	8000d40 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e193      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d036      	beq.n	8002508 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d016      	beq.n	80024d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe fc4a 	bl	8000d40 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe fc46 	bl	8000d40 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e173      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80024c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x234>
 80024ce:	e01b      	b.n	8002508 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fc33 	bl	8000d40 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	e00e      	b.n	80024fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024de:	f7fe fc2f 	bl	8000d40 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d907      	bls.n	80024fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e15c      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	42470000 	.word	0x42470000
 80024f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80024fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ea      	bne.n	80024de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8097 	beq.w	8002644 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251a:	4b83      	ldr	r3, [pc, #524]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b7f      	ldr	r3, [pc, #508]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a7e      	ldr	r2, [pc, #504]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b7c      	ldr	r3, [pc, #496]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b79      	ldr	r3, [pc, #484]	@ (800272c <HAL_RCC_OscConfig+0x4b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCC_OscConfig+0x4b0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a75      	ldr	r2, [pc, #468]	@ (800272c <HAL_RCC_OscConfig+0x4b0>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7fe fbef 	bl	8000d40 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe fbeb 	bl	8000d40 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e118      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b6c      	ldr	r3, [pc, #432]	@ (800272c <HAL_RCC_OscConfig+0x4b0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x31e>
 800258c:	4b66      	ldr	r3, [pc, #408]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002590:	4a65      	ldr	r2, [pc, #404]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	@ 0x70
 8002598:	e01c      	b.n	80025d4 <HAL_RCC_OscConfig+0x358>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x340>
 80025a2:	4b61      	ldr	r3, [pc, #388]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	4a60      	ldr	r2, [pc, #384]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0x358>
 80025bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a59      	ldr	r2, [pc, #356]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	4b57      	ldr	r3, [pc, #348]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a56      	ldr	r2, [pc, #344]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d015      	beq.n	8002608 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fbb0 	bl	8000d40 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe fbac 	bl	8000d40 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0d7      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ee      	beq.n	80025e4 <HAL_RCC_OscConfig+0x368>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe fb9a 	bl	8000d40 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fe fb96 	bl	8000d40 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0c1      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	4b40      	ldr	r3, [pc, #256]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ee      	bne.n	8002610 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002638:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	4a3a      	ldr	r2, [pc, #232]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002642:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80ad 	beq.w	80027a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800264e:	4b36      	ldr	r3, [pc, #216]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d060      	beq.n	800271c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d145      	bne.n	80026ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <HAL_RCC_OscConfig+0x4b4>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fb6a 	bl	8000d40 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fb66 	bl	8000d40 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e093      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b29      	ldr	r3, [pc, #164]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b8:	071b      	lsls	r3, r3, #28
 80026ba:	491b      	ldr	r1, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x4b4>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fb3b 	bl	8000d40 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fb37 	bl	8000d40 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e064      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x452>
 80026ec:	e05c      	b.n	80027a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_RCC_OscConfig+0x4b4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fb24 	bl	8000d40 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fb20 	bl	8000d40 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04d      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x480>
 800271a:	e045      	b.n	80027a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e040      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000
 8002730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002734:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <HAL_RCC_OscConfig+0x538>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d030      	beq.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d129      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d122      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800276a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	4293      	cmp	r3, r2
 800276e:	d119      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d10f      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e041      	b.n	800284e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe f8f4 	bl	80009cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f000 fa7e 	bl	8002cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d001      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e04e      	b.n	800290e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a23      	ldr	r2, [pc, #140]	@ (800291c <HAL_TIM_Base_Start_IT+0xc4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d022      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289a:	d01d      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002920 <HAL_TIM_Base_Start_IT+0xc8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d018      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002924 <HAL_TIM_Base_Start_IT+0xcc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002928 <HAL_TIM_Base_Start_IT+0xd0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00e      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <HAL_TIM_Base_Start_IT+0xd4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a19      	ldr	r2, [pc, #100]	@ (8002930 <HAL_TIM_Base_Start_IT+0xd8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_TIM_Base_Start_IT+0xdc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d010      	beq.n	800290c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fa:	e007      	b.n	800290c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40010000 	.word	0x40010000
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800
 8002928:	40000c00 	.word	0x40000c00
 800292c:	40010400 	.word	0x40010400
 8002930:	40014000 	.word	0x40014000
 8002934:	40001800 	.word	0x40001800

08002938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f999 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f98b 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f99c 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0204 	mvn.w	r2, #4
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f973 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f965 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f976 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0208 	mvn.w	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f94d 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f93f 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f950 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f927 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f919 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f92a 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd ff54 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fae4 	bl	8003090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8fb 	bl	8002ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0220 	mvn.w	r2, #32
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fab6 	bl	800307c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIM_ConfigClockSource+0x1c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e0b4      	b.n	8002c9e <HAL_TIM_ConfigClockSource+0x186>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b6c:	d03e      	beq.n	8002bec <HAL_TIM_ConfigClockSource+0xd4>
 8002b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b72:	f200 8087 	bhi.w	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b7a:	f000 8086 	beq.w	8002c8a <HAL_TIM_ConfigClockSource+0x172>
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b82:	d87f      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b70      	cmp	r3, #112	@ 0x70
 8002b86:	d01a      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0xa6>
 8002b88:	2b70      	cmp	r3, #112	@ 0x70
 8002b8a:	d87b      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b60      	cmp	r3, #96	@ 0x60
 8002b8e:	d050      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x11a>
 8002b90:	2b60      	cmp	r3, #96	@ 0x60
 8002b92:	d877      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b50      	cmp	r3, #80	@ 0x50
 8002b96:	d03c      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0xfa>
 8002b98:	2b50      	cmp	r3, #80	@ 0x50
 8002b9a:	d873      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b40      	cmp	r3, #64	@ 0x40
 8002b9e:	d058      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x13a>
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d86f      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b30      	cmp	r3, #48	@ 0x30
 8002ba6:	d064      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ba8:	2b30      	cmp	r3, #48	@ 0x30
 8002baa:	d86b      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d060      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x15a>
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d867      	bhi.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05c      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x15a>
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d05a      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x15a>
 8002bbc:	e062      	b.n	8002c84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bce:	f000 f9b9 	bl	8002f44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	609a      	str	r2, [r3, #8]
      break;
 8002bea:	e04f      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bfc:	f000 f9a2 	bl	8002f44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c0e:	609a      	str	r2, [r3, #8]
      break;
 8002c10:	e03c      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f000 f916 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2150      	movs	r1, #80	@ 0x50
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f96f 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 8002c30:	e02c      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f000 f935 	bl	8002eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2160      	movs	r1, #96	@ 0x60
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f95f 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 8002c50:	e01c      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f000 f8f6 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2140      	movs	r1, #64	@ 0x40
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f94f 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 8002c70:	e00c      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f000 f946 	bl	8002f0e <TIM_ITRx_SetConfig>
      break;
 8002c82:	e003      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      break;
 8002c88:	e000      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a46      	ldr	r2, [pc, #280]	@ (8002e24 <TIM_Base_SetConfig+0x12c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d013      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d16:	d00f      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a43      	ldr	r2, [pc, #268]	@ (8002e28 <TIM_Base_SetConfig+0x130>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00b      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a42      	ldr	r2, [pc, #264]	@ (8002e2c <TIM_Base_SetConfig+0x134>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a41      	ldr	r2, [pc, #260]	@ (8002e30 <TIM_Base_SetConfig+0x138>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a40      	ldr	r2, [pc, #256]	@ (8002e34 <TIM_Base_SetConfig+0x13c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d108      	bne.n	8002d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a35      	ldr	r2, [pc, #212]	@ (8002e24 <TIM_Base_SetConfig+0x12c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d58:	d027      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a32      	ldr	r2, [pc, #200]	@ (8002e28 <TIM_Base_SetConfig+0x130>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d023      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a31      	ldr	r2, [pc, #196]	@ (8002e2c <TIM_Base_SetConfig+0x134>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01f      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a30      	ldr	r2, [pc, #192]	@ (8002e30 <TIM_Base_SetConfig+0x138>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2f      	ldr	r2, [pc, #188]	@ (8002e34 <TIM_Base_SetConfig+0x13c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d017      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e38 <TIM_Base_SetConfig+0x140>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2d      	ldr	r2, [pc, #180]	@ (8002e3c <TIM_Base_SetConfig+0x144>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00f      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e40 <TIM_Base_SetConfig+0x148>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2b      	ldr	r2, [pc, #172]	@ (8002e44 <TIM_Base_SetConfig+0x14c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d007      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e48 <TIM_Base_SetConfig+0x150>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d003      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a29      	ldr	r2, [pc, #164]	@ (8002e4c <TIM_Base_SetConfig+0x154>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d108      	bne.n	8002dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a10      	ldr	r2, [pc, #64]	@ (8002e24 <TIM_Base_SetConfig+0x12c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0xf8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <TIM_Base_SetConfig+0x13c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	611a      	str	r2, [r3, #16]
  }
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40010400 	.word	0x40010400
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	40014400 	.word	0x40014400
 8002e40:	40014800 	.word	0x40014800
 8002e44:	40001800 	.word	0x40001800
 8002e48:	40001c00 	.word	0x40001c00
 8002e4c:	40002000 	.word	0x40002000

08002e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 030a 	bic.w	r3, r3, #10
 8002e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f023 0210 	bic.w	r2, r3, #16
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	031b      	lsls	r3, r3, #12
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002eea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f043 0307 	orr.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	021a      	lsls	r2, r3, #8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e05a      	b.n	8003052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	@ (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe8:	d01d      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1d      	ldr	r2, [pc, #116]	@ (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d018      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1a      	ldr	r2, [pc, #104]	@ (800306c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00e      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a18      	ldr	r2, [pc, #96]	@ (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a17      	ldr	r2, [pc, #92]	@ (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10c      	bne.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800302c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40010400 	.word	0x40010400
 8003074:	40014000 	.word	0x40014000
 8003078:	40001800 	.word	0x40001800

0800307c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e042      	b.n	800313c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fca4 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	@ 0x24
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f82b 	bl	8003144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800310c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800311c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003148:	b0c0      	sub	sp, #256	@ 0x100
 800314a:	af00      	add	r7, sp, #0
 800314c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	68d9      	ldr	r1, [r3, #12]
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	ea40 0301 	orr.w	r3, r0, r1
 800316c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	431a      	orrs	r2, r3
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	431a      	orrs	r2, r3
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800319c:	f021 010c 	bic.w	r1, r1, #12
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031aa:	430b      	orrs	r3, r1
 80031ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031be:	6999      	ldr	r1, [r3, #24]
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	ea40 0301 	orr.w	r3, r0, r1
 80031ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003410 <UART_SetConfig+0x2cc>)
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d005      	beq.n	80031e4 <UART_SetConfig+0xa0>
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b8d      	ldr	r3, [pc, #564]	@ (8003414 <UART_SetConfig+0x2d0>)
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d104      	bne.n	80031ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7fe fadc 	bl	80017a0 <HAL_RCC_GetPCLK2Freq>
 80031e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031ec:	e003      	b.n	80031f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ee:	f7fe fac3 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 80031f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003200:	f040 810c 	bne.w	800341c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003208:	2200      	movs	r2, #0
 800320a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800320e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003216:	4622      	mov	r2, r4
 8003218:	462b      	mov	r3, r5
 800321a:	1891      	adds	r1, r2, r2
 800321c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800321e:	415b      	adcs	r3, r3
 8003220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003226:	4621      	mov	r1, r4
 8003228:	eb12 0801 	adds.w	r8, r2, r1
 800322c:	4629      	mov	r1, r5
 800322e:	eb43 0901 	adc.w	r9, r3, r1
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800323e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003246:	4690      	mov	r8, r2
 8003248:	4699      	mov	r9, r3
 800324a:	4623      	mov	r3, r4
 800324c:	eb18 0303 	adds.w	r3, r8, r3
 8003250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003254:	462b      	mov	r3, r5
 8003256:	eb49 0303 	adc.w	r3, r9, r3
 800325a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800326a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800326e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003272:	460b      	mov	r3, r1
 8003274:	18db      	adds	r3, r3, r3
 8003276:	653b      	str	r3, [r7, #80]	@ 0x50
 8003278:	4613      	mov	r3, r2
 800327a:	eb42 0303 	adc.w	r3, r2, r3
 800327e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003288:	f7fc ffbc 	bl	8000204 <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4b61      	ldr	r3, [pc, #388]	@ (8003418 <UART_SetConfig+0x2d4>)
 8003292:	fba3 2302 	umull	r2, r3, r3, r2
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	011c      	lsls	r4, r3, #4
 800329a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800329e:	2200      	movs	r2, #0
 80032a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032ac:	4642      	mov	r2, r8
 80032ae:	464b      	mov	r3, r9
 80032b0:	1891      	adds	r1, r2, r2
 80032b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032b4:	415b      	adcs	r3, r3
 80032b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032bc:	4641      	mov	r1, r8
 80032be:	eb12 0a01 	adds.w	sl, r2, r1
 80032c2:	4649      	mov	r1, r9
 80032c4:	eb43 0b01 	adc.w	fp, r3, r1
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032dc:	4692      	mov	sl, r2
 80032de:	469b      	mov	fp, r3
 80032e0:	4643      	mov	r3, r8
 80032e2:	eb1a 0303 	adds.w	r3, sl, r3
 80032e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ea:	464b      	mov	r3, r9
 80032ec:	eb4b 0303 	adc.w	r3, fp, r3
 80032f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003300:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003308:	460b      	mov	r3, r1
 800330a:	18db      	adds	r3, r3, r3
 800330c:	643b      	str	r3, [r7, #64]	@ 0x40
 800330e:	4613      	mov	r3, r2
 8003310:	eb42 0303 	adc.w	r3, r2, r3
 8003314:	647b      	str	r3, [r7, #68]	@ 0x44
 8003316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800331a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800331e:	f7fc ff71 	bl	8000204 <__aeabi_uldivmod>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4611      	mov	r1, r2
 8003328:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <UART_SetConfig+0x2d4>)
 800332a:	fba3 2301 	umull	r2, r3, r3, r1
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	2264      	movs	r2, #100	@ 0x64
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	1acb      	subs	r3, r1, r3
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800333e:	4b36      	ldr	r3, [pc, #216]	@ (8003418 <UART_SetConfig+0x2d4>)
 8003340:	fba3 2302 	umull	r2, r3, r3, r2
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800334c:	441c      	add	r4, r3
 800334e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003352:	2200      	movs	r2, #0
 8003354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003358:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800335c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003360:	4642      	mov	r2, r8
 8003362:	464b      	mov	r3, r9
 8003364:	1891      	adds	r1, r2, r2
 8003366:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003368:	415b      	adcs	r3, r3
 800336a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800336c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003370:	4641      	mov	r1, r8
 8003372:	1851      	adds	r1, r2, r1
 8003374:	6339      	str	r1, [r7, #48]	@ 0x30
 8003376:	4649      	mov	r1, r9
 8003378:	414b      	adcs	r3, r1
 800337a:	637b      	str	r3, [r7, #52]	@ 0x34
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003388:	4659      	mov	r1, fp
 800338a:	00cb      	lsls	r3, r1, #3
 800338c:	4651      	mov	r1, sl
 800338e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003392:	4651      	mov	r1, sl
 8003394:	00ca      	lsls	r2, r1, #3
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	4603      	mov	r3, r0
 800339c:	4642      	mov	r2, r8
 800339e:	189b      	adds	r3, r3, r2
 80033a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033a4:	464b      	mov	r3, r9
 80033a6:	460a      	mov	r2, r1
 80033a8:	eb42 0303 	adc.w	r3, r2, r3
 80033ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033c4:	460b      	mov	r3, r1
 80033c6:	18db      	adds	r3, r3, r3
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ca:	4613      	mov	r3, r2
 80033cc:	eb42 0303 	adc.w	r3, r2, r3
 80033d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033da:	f7fc ff13 	bl	8000204 <__aeabi_uldivmod>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <UART_SetConfig+0x2d4>)
 80033e4:	fba3 1302 	umull	r1, r3, r3, r2
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	2164      	movs	r1, #100	@ 0x64
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	3332      	adds	r3, #50	@ 0x32
 80033f6:	4a08      	ldr	r2, [pc, #32]	@ (8003418 <UART_SetConfig+0x2d4>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	f003 0207 	and.w	r2, r3, #7
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4422      	add	r2, r4
 800340a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800340c:	e106      	b.n	800361c <UART_SetConfig+0x4d8>
 800340e:	bf00      	nop
 8003410:	40011000 	.word	0x40011000
 8003414:	40011400 	.word	0x40011400
 8003418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800341c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003420:	2200      	movs	r2, #0
 8003422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003426:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800342a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800342e:	4642      	mov	r2, r8
 8003430:	464b      	mov	r3, r9
 8003432:	1891      	adds	r1, r2, r2
 8003434:	6239      	str	r1, [r7, #32]
 8003436:	415b      	adcs	r3, r3
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
 800343a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800343e:	4641      	mov	r1, r8
 8003440:	1854      	adds	r4, r2, r1
 8003442:	4649      	mov	r1, r9
 8003444:	eb43 0501 	adc.w	r5, r3, r1
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	00eb      	lsls	r3, r5, #3
 8003452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003456:	00e2      	lsls	r2, r4, #3
 8003458:	4614      	mov	r4, r2
 800345a:	461d      	mov	r5, r3
 800345c:	4643      	mov	r3, r8
 800345e:	18e3      	adds	r3, r4, r3
 8003460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003464:	464b      	mov	r3, r9
 8003466:	eb45 0303 	adc.w	r3, r5, r3
 800346a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800347a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800348a:	4629      	mov	r1, r5
 800348c:	008b      	lsls	r3, r1, #2
 800348e:	4621      	mov	r1, r4
 8003490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003494:	4621      	mov	r1, r4
 8003496:	008a      	lsls	r2, r1, #2
 8003498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800349c:	f7fc feb2 	bl	8000204 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4b60      	ldr	r3, [pc, #384]	@ (8003628 <UART_SetConfig+0x4e4>)
 80034a6:	fba3 2302 	umull	r2, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	011c      	lsls	r4, r3, #4
 80034ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034c0:	4642      	mov	r2, r8
 80034c2:	464b      	mov	r3, r9
 80034c4:	1891      	adds	r1, r2, r2
 80034c6:	61b9      	str	r1, [r7, #24]
 80034c8:	415b      	adcs	r3, r3
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d0:	4641      	mov	r1, r8
 80034d2:	1851      	adds	r1, r2, r1
 80034d4:	6139      	str	r1, [r7, #16]
 80034d6:	4649      	mov	r1, r9
 80034d8:	414b      	adcs	r3, r1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034e8:	4659      	mov	r1, fp
 80034ea:	00cb      	lsls	r3, r1, #3
 80034ec:	4651      	mov	r1, sl
 80034ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034f2:	4651      	mov	r1, sl
 80034f4:	00ca      	lsls	r2, r1, #3
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	4642      	mov	r2, r8
 80034fe:	189b      	adds	r3, r3, r2
 8003500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003504:	464b      	mov	r3, r9
 8003506:	460a      	mov	r2, r1
 8003508:	eb42 0303 	adc.w	r3, r2, r3
 800350c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	67bb      	str	r3, [r7, #120]	@ 0x78
 800351a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003528:	4649      	mov	r1, r9
 800352a:	008b      	lsls	r3, r1, #2
 800352c:	4641      	mov	r1, r8
 800352e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003532:	4641      	mov	r1, r8
 8003534:	008a      	lsls	r2, r1, #2
 8003536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800353a:	f7fc fe63 	bl	8000204 <__aeabi_uldivmod>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4611      	mov	r1, r2
 8003544:	4b38      	ldr	r3, [pc, #224]	@ (8003628 <UART_SetConfig+0x4e4>)
 8003546:	fba3 2301 	umull	r2, r3, r3, r1
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2264      	movs	r2, #100	@ 0x64
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	1acb      	subs	r3, r1, r3
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	3332      	adds	r3, #50	@ 0x32
 8003558:	4a33      	ldr	r2, [pc, #204]	@ (8003628 <UART_SetConfig+0x4e4>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003564:	441c      	add	r4, r3
 8003566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800356a:	2200      	movs	r2, #0
 800356c:	673b      	str	r3, [r7, #112]	@ 0x70
 800356e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003570:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	1891      	adds	r1, r2, r2
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	415b      	adcs	r3, r3
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003584:	4641      	mov	r1, r8
 8003586:	1851      	adds	r1, r2, r1
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	4649      	mov	r1, r9
 800358c:	414b      	adcs	r3, r1
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800359c:	4659      	mov	r1, fp
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4651      	mov	r1, sl
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4651      	mov	r1, sl
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4642      	mov	r2, r8
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035b6:	464b      	mov	r3, r9
 80035b8:	460a      	mov	r2, r1
 80035ba:	eb42 0303 	adc.w	r3, r2, r3
 80035be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035d8:	4649      	mov	r1, r9
 80035da:	008b      	lsls	r3, r1, #2
 80035dc:	4641      	mov	r1, r8
 80035de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035e2:	4641      	mov	r1, r8
 80035e4:	008a      	lsls	r2, r1, #2
 80035e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035ea:	f7fc fe0b 	bl	8000204 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <UART_SetConfig+0x4e4>)
 80035f4:	fba3 1302 	umull	r1, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2164      	movs	r1, #100	@ 0x64
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	3332      	adds	r3, #50	@ 0x32
 8003606:	4a08      	ldr	r2, [pc, #32]	@ (8003628 <UART_SetConfig+0x4e4>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4422      	add	r2, r4
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003622:	46bd      	mov	sp, r7
 8003624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003628:	51eb851f 	.word	0x51eb851f

0800362c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800362c:	b084      	sub	sp, #16
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	f107 001c 	add.w	r0, r7, #28
 800363a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800363e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003642:	2b01      	cmp	r3, #1
 8003644:	d123      	bne.n	800368e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800365a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800366e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa9a 	bl	8003bbc <USB_CoreReset>
 8003688:	4603      	mov	r3, r0
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e01b      	b.n	80036c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa8e 	bl	8003bbc <USB_CoreReset>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80036b8:	e005      	b.n	80036c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036c6:	7fbb      	ldrb	r3, [r7, #30]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10b      	bne.n	80036e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f043 0206 	orr.w	r2, r3, #6
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f0:	b004      	add	sp, #16
 80036f2:	4770      	bx	lr

080036f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 0201 	bic.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d115      	bne.n	8003764 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003744:	200a      	movs	r0, #10
 8003746:	f7fd fb07 	bl	8000d58 <HAL_Delay>
      ms += 10U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	330a      	adds	r3, #10
 800374e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fa25 	bl	8003ba0 <USB_GetMode>
 8003756:	4603      	mov	r3, r0
 8003758:	2b01      	cmp	r3, #1
 800375a:	d01e      	beq.n	800379a <USB_SetCurrentMode+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003760:	d9f0      	bls.n	8003744 <USB_SetCurrentMode+0x2e>
 8003762:	e01a      	b.n	800379a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d115      	bne.n	8003796 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003776:	200a      	movs	r0, #10
 8003778:	f7fd faee 	bl	8000d58 <HAL_Delay>
      ms += 10U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	330a      	adds	r3, #10
 8003780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa0c 	bl	8003ba0 <USB_GetMode>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <USB_SetCurrentMode+0x84>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2bc7      	cmp	r3, #199	@ 0xc7
 8003792:	d9f0      	bls.n	8003776 <USB_SetCurrentMode+0x60>
 8003794:	e001      	b.n	800379a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e005      	b.n	80037a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2bc8      	cmp	r3, #200	@ 0xc8
 800379e:	d101      	bne.n	80037a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037b0:	b084      	sub	sp, #16
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e009      	b.n	80037e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3340      	adds	r3, #64	@ 0x40
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	2200      	movs	r2, #0
 80037dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3301      	adds	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0e      	cmp	r3, #14
 80037e8:	d9f2      	bls.n	80037d0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11c      	bne.n	800382c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e005      	b.n	8003838 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800383e:	461a      	mov	r2, r3
 8003840:	2300      	movs	r3, #0
 8003842:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003844:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003848:	2b01      	cmp	r3, #1
 800384a:	d10d      	bne.n	8003868 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800384c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003854:	2100      	movs	r1, #0
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f968 	bl	8003b2c <USB_SetDevSpeed>
 800385c:	e008      	b.n	8003870 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800385e:	2101      	movs	r1, #1
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f963 	bl	8003b2c <USB_SetDevSpeed>
 8003866:	e003      	b.n	8003870 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003868:	2103      	movs	r1, #3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f95e 	bl	8003b2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003870:	2110      	movs	r1, #16
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8fa 	bl	8003a6c <USB_FlushTxFifo>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f924 	bl	8003ad0 <USB_FlushRxFifo>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003898:	461a      	mov	r2, r3
 800389a:	2300      	movs	r3, #0
 800389c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a4:	461a      	mov	r2, r3
 80038a6:	2300      	movs	r3, #0
 80038a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b0:	461a      	mov	r2, r3
 80038b2:	2300      	movs	r3, #0
 80038b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e043      	b.n	8003944 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038d2:	d118      	bne.n	8003906 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e6:	461a      	mov	r2, r3
 80038e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e013      	b.n	8003918 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038fc:	461a      	mov	r2, r3
 80038fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e008      	b.n	8003918 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003912:	461a      	mov	r2, r3
 8003914:	2300      	movs	r3, #0
 8003916:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003924:	461a      	mov	r2, r3
 8003926:	2300      	movs	r3, #0
 8003928:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003936:	461a      	mov	r2, r3
 8003938:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800393c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	3301      	adds	r3, #1
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003948:	461a      	mov	r2, r3
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4293      	cmp	r3, r2
 800394e:	d3b5      	bcc.n	80038bc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	e043      	b.n	80039de <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800396c:	d118      	bne.n	80039a0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e013      	b.n	80039b2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e008      	b.n	80039b2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	2300      	movs	r3, #0
 80039b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d0:	461a      	mov	r2, r3
 80039d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	3301      	adds	r3, #1
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039e2:	461a      	mov	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d3b5      	bcc.n	8003956 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f043 0210 	orr.w	r2, r3, #16
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <USB_DevInit+0x2b8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f043 0208 	orr.w	r2, r3, #8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a64:	b004      	add	sp, #16
 8003a66:	4770      	bx	lr
 8003a68:	803c3800 	.word	0x803c3800

08003a6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a86:	d901      	bls.n	8003a8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e01b      	b.n	8003ac4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	daf2      	bge.n	8003a7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	019b      	lsls	r3, r3, #6
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ab0:	d901      	bls.n	8003ab6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e006      	b.n	8003ac4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d0f0      	beq.n	8003aa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ae8:	d901      	bls.n	8003aee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e018      	b.n	8003b20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	daf2      	bge.n	8003adc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2210      	movs	r2, #16
 8003afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b0c:	d901      	bls.n	8003b12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e006      	b.n	8003b20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d0f0      	beq.n	8003b00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	68f9      	ldr	r1, [r7, #12]
 8003b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003b78:	f023 0303 	bic.w	r3, r3, #3
 8003b7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f003 0301 	and.w	r3, r3, #1
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bd4:	d901      	bls.n	8003bda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e01b      	b.n	8003c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	daf2      	bge.n	8003bc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bfe:	d901      	bls.n	8003c04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e006      	b.n	8003c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d0f0      	beq.n	8003bf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <memset>:
 8003c1e:	4402      	add	r2, r0
 8003c20:	4603      	mov	r3, r0
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d100      	bne.n	8003c28 <memset+0xa>
 8003c26:	4770      	bx	lr
 8003c28:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2c:	e7f9      	b.n	8003c22 <memset+0x4>
	...

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4d0d      	ldr	r5, [pc, #52]	@ (8003c68 <__libc_init_array+0x38>)
 8003c34:	4c0d      	ldr	r4, [pc, #52]	@ (8003c6c <__libc_init_array+0x3c>)
 8003c36:	1b64      	subs	r4, r4, r5
 8003c38:	10a4      	asrs	r4, r4, #2
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	4d0b      	ldr	r5, [pc, #44]	@ (8003c70 <__libc_init_array+0x40>)
 8003c42:	4c0c      	ldr	r4, [pc, #48]	@ (8003c74 <__libc_init_array+0x44>)
 8003c44:	f000 f818 	bl	8003c78 <_init>
 8003c48:	1b64      	subs	r4, r4, r5
 8003c4a:	10a4      	asrs	r4, r4, #2
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	08003cb0 	.word	0x08003cb0
 8003c6c:	08003cb0 	.word	0x08003cb0
 8003c70:	08003cb0 	.word	0x08003cb0
 8003c74:	08003cb4 	.word	0x08003cb4

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
